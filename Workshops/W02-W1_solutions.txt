###W02-W1_ex1_start_py
# Create the 2x2 identity matrix
my_mat = [[1, 0], [0, 1]]

# Append one element to the 2 existing rows
my_mat[0].append(0)
my_mat[1].append(0)

# Append the 3rd row to the list of rows
my_mat.append([0, 0, 1])
###W02-W1_ex1_end

###W02-W1_ex2_start_py
m = ['a', 'b', 'c', 'd', 'e']
m_back = m[::-1]
print(m_back)
###W02-W1_ex2_end

###W02-W1_ex3_start_py
# We can get pi from the math module
import math

# Create a list of n-1 ones
n = 6
my_list = [1] * (n-1)

# Append pi, check length
my_list.append(math.pi)
print('Does the list have length n now?', len(my_list) == n)

# Change the value of the 3rd element
my_list[2] = sum(my_list[4:])
print(my_list)
###W02-W1_ex3_end

###W02-W1_ex4_start_py
###W02-W1_ex4_end

###W02-W1_ex5_start_py
# Set n and initialise P
n = 20
P = 1

# Loop from j=2 to j=n
for j in range(2, n+1):
    # Multiply each term in succession
    P *= j**3 + 5*j**2 - 3

# Display the result
print(P)
###W02-W1_ex5_end

###W02-W1_ex6_start_py
import math

e = 1
n = 0

# Loop as long as e is not close enough to the exact value
while not math.isclose(math.exp(1), e, rel_tol=1e-6):
    n += 1                      # increment n by 1
    e += 1 / math.factorial(n)  # add the nth term of the series
    
    print(f'n = {n}')
    print(f'Exact value of exp(1): {math.exp(1):.6f}')
    print(f'Approximate value: {e:.6f}\n')

print(f'{n} iterations are needed.')
###W02-W1_ex6_end

###W02-W1_ex7_start_py
def compute_P(n):
    '''
    Computes the product P for a value of n.
    '''
    # Initialise P
    P = 1

    # Loop from j=2 to j=n
    for j in range(2, n+1):
        # Multiply each term in succession
        P *= j**3 + 5*j**2 - 3

    # Return the result
    return P

# Test the function
print(compute_P(7))
###W02-W1_ex7_end
